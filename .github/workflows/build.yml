name: Build and Deploy Docs

# Grant workflow permission to push to repository
permissions:
  contents: write

on:
  workflow_dispatch:

# push:
  #   branches:
  #     - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # 3️⃣ Install Puppeteer
      - name: Install Puppeteer
        run: npm install puppeteer

      # 4️⃣ Start local HTTP server
      - name: Start local HTTP server
        run: python3 -m http.server 8080 --bind 127.0.0.1 &

      # 4.1️⃣ Wait for HTTP server to be ready
      - name: Wait for local HTTP server
        run: |
          echo "Waiting for HTTP server to be ready..."
          for i in {1..20}; do
            if curl -s http://127.0.0.1:8080 > /dev/null; then
              echo "Server is ready!"
              break
            else
              echo "Waiting... ($i)"
              sleep 3
            fi
          done

      # 5️⃣ Render ReSpec document (robust with debug)
      - name: Render ReSpec document
        run: |
          npx puppeteer browsers install chrome
          
          node -e "
          const puppeteer = require('puppeteer');
          const fs = require('fs');
          (async () => {
            const browser = await puppeteer.launch({
              headless: true,
              args: ['--no-sandbox', '--disable-setuid-sandbox']
            });
            const page = await browser.newPage();
            
            console.log('Navigating to local HTML...');
            await page.goto('http://127.0.0.1:8080/index.html', { waitUntil: 'networkidle2' });

            try {
              await page.waitForFunction(() => document.respec && document.respec.ready, { timeout: 90000 });
              console.log('ReSpec is ready.');
              await page.evaluate(() => document.respec.flush());
            } catch (err) {
              console.warn('⚠️ ReSpec.ready not detected. Proceeding after fallback wait.');
              await new Promise(resolve => setTimeout(resolve, 5000));
            }

            await page.pdf({ path: 'snapshot.pdf', format: 'A4', printBackground: true });
            await page.screenshot({ path: 'snapshot.png', fullPage: true });
            const htmlContent = await page.content();
            fs.writeFileSync('snapshot.html', htmlContent);
            console.log('Preview of snapshot.html:', htmlContent.substring(0, 200));

            await browser.close();
            console.log('Snapshots generated successfully.');
          })();"

      # 5.1️⃣ Verify snapshot files
      - name: Verify snapshot files
        run: |
          echo "Checking generated files..."
          ls -lh snapshot.*
          if [ ! -s snapshot.html ]; then
            echo "❌ snapshot.html is empty!"
            exit 1
          fi
          echo "✅ snapshot.html has content."

      # 5.2️⃣ Upload snapshot artifacts
      - name: Upload snapshot artifacts
        uses: actions/upload-artifact@v3
        with:
          name: docs-snapshots
          path: |
            snapshot.html
            snapshot.pdf
            snapshot.png

      # 6️⃣ Prepare docs folder
      - name: Prepare docs folder
        run: |
          rm -rf docs/* || true
          mkdir -p docs
          cp snapshot.html docs/index.html
          cp snapshot.pdf docs/
          cp snapshot.png docs/
          cp -r css js media md docs/ || true
          touch docs/.nojekyll

      # 7️⃣ Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          publish_branch: gh-pages
          user_name: github-actions[bot]
          user_email: github-actions[bot]@users.noreply.github.com
