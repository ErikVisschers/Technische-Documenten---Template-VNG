name: Build and Deploy Docs

permissions:
  contents: write

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 1️⃣.1️⃣ Check if Imvertor file exists
      - name: Check imvertor file exists
        run: |
          echo "Checking for imvertor file..."
          ls -lh content/generated/
          if [ ! -f content/generated/LOGICAL-JZV-1-20251001.respec.html ]; then
            echo "❌ Imvertor file is missing!"
            exit 1
          fi
          echo "✅ Imvertor file exists."

      # 2️⃣ Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

          
      # 3️⃣ Install Puppeteer
      - name: Install Puppeteer
        run: npm install puppeteer

      # 4️⃣ Start local HTTP server
      - name: Start local HTTP server
        run: python3 -m http.server 8080 --bind 127.0.0.1 &

      # 4️⃣.1️⃣ Wait for server ready
      - name: Wait for local HTTP server
        run: |
          echo "Waiting for HTTP server..."
          for i in {1..20}; do
            if curl -s http://127.0.0.1:8080 > /dev/null; then
              echo "Server ready!"
              break
            else
              echo "Waiting... ($i)"
              sleep 3
            fi
          done

      # 5️⃣ Render ReSpec document with robust checks
      - name: Render ReSpec document
        run: |
          npx puppeteer browsers install chrome
          node -e "

          const puppeteer = require('puppeteer');
          const fs = require('fs');

          (async () => {
            const browser = await puppeteer.launch({
              headless: true,
              args: ['--no-sandbox', '--disable-setuid-sandbox']
            });

            const page = await browser.newPage();
            console.log('Navigating to local HTML...');

            await page.goto('http://127.0.0.1:8080/index.html', { waitUntil: 'networkidle2' });

            try {
              console.log('Waiting for ReSpec and #imvertor to load...');

              // Wait until ReSpec is ready AND #imvertor exists AND sections have rendered
              await page.waitForFunction(
                () => {
                  const respecReady = document.respec && document.respec.ready;
                  const imvertor = document.querySelector('#imvertor');
                  const sections = document.querySelectorAll('section').length;
                  // Optional: check that #imvertor has innerHTML
                  const imvertorFilled = imvertor && imvertor.innerHTML.trim().length > 0;
                  return respecReady && imvertorFilled && sections > 3;
                },
                { timeout: 300000 } // 5 minutes for large files
              );

              console.log('✅ ReSpec ready and Imvertor loaded.');

              // Force a final ReSpec flush to ensure all sections are processed
              await page.evaluate(() => {
                if (document.respec && document.respec.flush) {
                  return document.respec.flush();
                }
              });

              // Extra wait for dynamic content like Mermaid diagrams
              await page.waitForTimeout(3000); // 3 seconds

            } catch (err) {
              console.warn('⚠️ ReSpec or Imvertor not fully detected. Generating snapshots anyway.');
            }

            // Generate snapshots
            console.log('Generating snapshots...');
            await page.pdf({ path: 'snapshot.pdf', format: 'A4', printBackground: true });
            await page.screenshot({ path: 'snapshot.png', fullPage: true });

            const htmlContent = await page.content();
            fs.writeFileSync('snapshot.html', htmlContent);

            console.log('✅ Snapshots generated.');
            await browser.close();
          })();

      # 5️⃣.1️⃣ Verify snapshots
      - name: Verify snapshot files
        run: |
          echo "Checking generated snapshots..."
          ls -lh snapshot.*
          for f in snapshot.html snapshot.pdf snapshot.png; do
            if [ ! -s $f ]; then
              echo "❌ $f is empty or missing!"
              exit 1
            fi
          done
          echo "✅ All snapshots present and non-empty."

      # 6️⃣ Prepare docs folder
      - name: Prepare docs folder
        run: |
          mkdir -p docs
          cp snapshot.html docs/index.html
          cp snapshot.pdf docs/
          cp snapshot.png docs/
          # Copy only needed static assets
          cp -r css js media docs/
          touch docs/.nojekyll

      # 7️⃣ Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          publish_branch: gh-pages
          user_name: github-actions[bot]
          user_email: github-actions[bot]@users.noreply.github.com
